server {
    server_name couchdb.oblivio.localhost;

    listen 443 ssl;
    listen [::]:443 ssl;

    http2 on;

    ssl_certificate bitnami/certs/server.crt;
    ssl_certificate_key bitnami/certs/server.key;

    location / {
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;

         proxy_pass http://couchdb:5984;
    }

    location /_utils/ {
        auth_request /o/oauth2/auth;
        error_page 401 =403 /o/oauth2/sign_in?rd=$scheme://$host$request_uri;

        auth_request_set $auth_cookie $upstream_http_set_cookie;
        add_header Set-Cookie $auth_cookie;

        auth_request_set $username $upstream_http_x_auth_request_preferred_username;
        auth_request_set $groups $upstream_http_x_auth_request_groups;
        auth_request_set $token $upstream_http_x_auth_request_access_token;

        access_by_lua_block {
            local username = "org.couchdb.user:" .. ngx.var.username
            local groups = ngx.var.groups
            local secret = "top-secret"

            local roles = {}
            for role in string.gmatch(groups, "[^,]+") do
                if role:sub(1, 13) == "role:couchdb:" then
                    table.insert(roles, role:sub(14))
                end
            end
            roles = table.concat(roles, ",")

            local hmac = require "resty.hmac"
            local token = hmac:new(secret, hmac.ALGOS.SHA256):final(username, true)

            ngx.req.set_header("X-Auth-CouchDB-Username", username)
            ngx.req.set_header("X-Auth-CouchDB-Roles", roles)
            ngx.req.set_header("X-Auth-CouchDB-Token", token)
        }

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://couchdb:5984;
    }

    location /o/oauth2/ {
        proxy_pass http://oauth2-proxy:4180;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
    }
}
